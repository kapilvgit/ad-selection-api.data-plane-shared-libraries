/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{- $defineGuard := $file.Package | printf "%s_" | replace "." "_" | upper}}
#ifndef {{$defineGuard}}
#define {{$defineGuard}}

#include "src/roma/config/function_binding_object_v2.h"
#include "src/roma/roma_service/romav8_app_service.h"
#include "{{$file.Name | trimSuffix (ext $file.Name)}}.pb.h"

#include "absl/status/status.h"
#include "absl/strings/str_cat.h"
#include "absl/synchronization/notification.h"

{{range $svc := .Services}}
{{- $svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}

namespace {{$svcopts.CppNamespace}} {

/*
 * service: {{$svc.FullName}}
 */
template <typename TMetadata = google::scp::roma::DefaultMetadata>
class {{$svc.Name}} : public google::scp::roma::romav8::app_api::RomaV8AppService<TMetadata> {
 public:
  using AppService = google::scp::roma::romav8::app_api::RomaV8AppService<TMetadata>;
  using RomaService = typename AppService::RomaService;

 public:
  explicit {{$svc.Name}}(RomaService& roma_service, const std::string& code_id = "{{$svcopts.CodeId}}")
      : AppService(roma_service, code_id) {}

  absl::Status Register(absl::Notification& notification,
                        absl::Status& notify_status,
                        std::string_view jscode,
                        std::string_view code_version = "1") {
    return AppService::Register(
        notification,
        notify_status,
        absl::StrCat(roma_app_jscode, jscode),
        code_version);
  }


{{- range $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  /*
   * {{$rpc.Name}}
   * {{- $rpc.Description}}
   * request: {{$reqType}}
   * response: {{$respType}}
   */
  absl::Status {{$rpc.Name}}(
      absl::Notification& notification,
      const {{$reqType}}& request,
      {{$respType}}& response) {
    return AppService::Execute(notification, "{{$svcopts.Romav8AppName}}.{{$rpc.Name}}Pb", request, response);
  }

{{end}}
 private:
 inline static constexpr std::string_view roma_app_jscode = R"ROMA_APP_JSCODE(
@ROMA_APP_JSCODE@
)ROMA_APP_JSCODE";
};

}  // namespace {{$svcopts.CppNamespace}}
{{end}}

#endif  // {{$defineGuard}}
{{end}}
