/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{{range $file := .Files}}
{{$proto_basename := base $file.Name | trimSuffix (ext $file.Name)}}

#include "{{$proto_basename}}_romav8_app_service.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>


{{range $svc := .Services}}
{{$svcopts := index $svc.Options "privacysandbox.apis.roma.app_api.v1.roma_svc_annotation"}}

namespace {{$svcopts.CppNamespace}}::test {

class RomaV8AppServiceTest : public ::testing::Test {
 protected:
  void SetUp() override {
    google::scp::roma::Config cfg;
    cfg.number_of_workers = 2;
    roma_service_ = std::make_unique<
        google::scp::roma::sandbox::roma_service::RomaService<>>(std::move(cfg));
    EXPECT_TRUE(roma_service_->Init().ok());
  }

  void TearDown() override {
    const absl::Status status = roma_service_->Stop();
    EXPECT_TRUE(status.ok());
  }

 protected:
  std::unique_ptr<RomaService<>> roma_service_;
};

namespace {
  const absl::Duration kDefaultTimeout = absl::Seconds(10);
}

{{- range $i, $rpc := .MethodsWithOption "privacysandbox.apis.roma.app_api.v1.roma_rpc_annotation"}}
  {{- $reqType := $rpc.RequestFullType | replace "." "::" | printf "::%s" }}
  {{- $respType := $rpc.ResponseFullType | replace "." "::" | printf "::%s" }}
  {{- $testName := printf "EncodeDecodeProtobuf_%d" $i}}
TEST_F(RomaV8AppServiceTest, {{$testName}}) {
  {{$svc.Name}}<> app_svc(*roma_service_);

  constexpr std::string_view jscode = R"(
    {{$svcopts.Romav8AppName}}.{{$rpc.Name}} = function(req) {
      return {};
    };
  )";
  absl::Notification register_finished;
  absl::Status register_status;
  ASSERT_TRUE(app_svc.Register(register_finished, register_status, jscode).ok());
  register_finished.WaitForNotificationWithTimeout(kDefaultTimeout);
  EXPECT_TRUE(register_status.ok());

  absl::Notification completed;
  {{$reqType}} req;
  {{$respType}} resp;
  ASSERT_TRUE(app_svc.{{$rpc.Name}}(completed, req, resp).ok());
  completed.WaitForNotificationWithTimeout(kDefaultTimeout);
}
{{end}}

}  // {{$svcopts.CppNamespace}}::test

{{end}}
{{end}}
